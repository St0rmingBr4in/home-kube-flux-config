name: Test K3s Deployment

on:
  push:
    branches: ["**"]
    paths:
      - "argocd/applications/**"
  pull_request:
    paths:
      - "argocd/applications/**"
  workflow_dispatch: # Allow manual triggering

env:
  COMMIT_SHA: ${{ github.sha }}

jobs:
  update-target-revisions:
    runs-on: ubuntu-latest
    outputs:
      commit-sha: ${{ steps.get-sha.outputs.sha }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get current commit SHA
        id: get-sha
        run: echo "sha=${GITHUB_SHA}" >> $GITHUB_OUTPUT

      - name: Update targetRevision in application files
        run: |
          # Find all application.yaml files that reference our repository
          find argocd/applications -name "application.yaml" -type f | while read -r file; do
            if grep -q "github.com/St0rmingBr4in/home-kube-flux-config" "$file"; then
              echo "Updating $file..."
              # Replace targetRevision: HEAD with current commit SHA
              sed -i.bak "s|targetRevision: HEAD|targetRevision: ${GITHUB_SHA}|g" "$file"
              # Clean up backup files
              rm -f "$file.bak"
            fi
          done

      - name: Verify changes
        run: |
          echo "Modified files with new targetRevision:"
          git diff

      - name: Set up K3s cluster
        uses: debianmaster/actions-k3s@master
        id: k3s
        with:
          version: latest

      - name: Wait for K3s to be ready
        run: |
          kubectl wait --for=condition=Ready nodes --all --timeout=300s
          kubectl get nodes -o wide

      - name: Install ArgoCD
        run: |
          # Create ArgoCD namespace
          kubectl create namespace argocd

          # Install ArgoCD using the official manifests
          kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml

          # Wait for ArgoCD to be ready
          echo "Waiting for ArgoCD deployments..."
          kubectl wait --for=condition=available --timeout=600s deployment/argocd-server -n argocd
          kubectl wait --for=condition=available --timeout=600s deployment/argocd-repo-server -n argocd
          kubectl wait --for=condition=available --timeout=600s deployment/argocd-applicationset-controller -n argocd

      - name: Configure ArgoCD
        run: |
          # Get ArgoCD admin password
          ARGO_PASSWORD=$(kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d)

          # Port forward ArgoCD server (run in background)
          kubectl port-forward svc/argocd-server -n argocd 8081:443 &
          PORTFORWARD_PID=$!
          sleep 10

          # Login to ArgoCD CLI
          # First, download ArgoCD CLI
          curl -sSL -o argocd-linux-amd64 https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
          sudo install -m 555 argocd-linux-amd64 /usr/local/bin/argocd
          rm argocd-linux-amd64

          # Login (disable TLS verification for local testing)
          argocd login localhost:8081 --username admin --password "$ARGO_PASSWORD" --insecure

          # Kill port forward
          kill $PORTFORWARD_PID || true

      - name: Test core ArgoCD applications
        run: |
          echo "Testing core ArgoCD applications..."

          # Apply the argocd-apps application first (this manages other applications)
          kubectl apply -f argocd/applications/core/argocd-apps/application.yaml

          # Wait a moment for ArgoCD to process
          sleep 30

          # Check if applications are created
          kubectl get applications -n argocd

      - name: Validate application health
        run: |
          echo "Checking ArgoCD application status..."

          # Port forward again for CLI commands
          kubectl port-forward svc/argocd-server -n argocd 8081:443 &
          PORTFORWARD_PID=$!
          sleep 10

          # Re-login
          ARGO_PASSWORD=$(kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d)
          argocd login localhost:8081 --username admin --password "$ARGO_PASSWORD" --insecure

          # List all applications
          echo "=== ArgoCD Applications ==="
          argocd app list

          # Get detailed status of the argocd-apps application
          echo "=== ArgoCD Apps Application Status ==="
          argocd app get argocd-apps || echo "argocd-apps application not found"

          # Kill port forward
          kill $PORTFORWARD_PID || true

      - name: Test specific application categories
        run: |
          echo "Testing application categories..."

          # Test that kustomization files are valid
          echo "=== Validating Kustomization files ==="
          find argocd/applications -name "kustomization.yaml" | while read -r file; do
            echo "Validating $file"
            kubectl kustomize "$(dirname "$file")" > /dev/null && echo "✓ Valid" || echo "✗ Invalid"
          done

      - name: Cleanup and summary
        if: always()
        run: |
          echo "=== Test Summary ==="
          echo "K3s cluster info:"
          kubectl cluster-info

          echo "=== All pods ==="
          kubectl get pods -A

          echo "=== ArgoCD Applications ==="
          kubectl get applications -n argocd || echo "No applications found"

          echo "=== Nodes ==="
          kubectl get nodes
